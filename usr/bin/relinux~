#!/bin/bash
#
# Relinux is a remastering script based on remastersys
# It is made to be simpler, better, more customizable,
# better documented, up to date with the latest systems,
# more user friendly, and accessable by many linux distributions
#
# Copyright 2011/2012 under the GNU GPLv3 license
# Joel Leclerc (lkjoel)
#
# Original Script (remastersys) Copyright 2007-2011 Tony "Fragadelic" Brijeski <tb6517@yahoo.com>
#
# A few useful variables
export DIR=/etc/relinux/
export CONFIGFILE=$DIR/relinux.conf
export PROGNAME=relinux
export PROGVERSION="0.3"
export POSSIBLEARGS="clean fullclean squashfs onlyiso config"
export TRUE=0
export FALSE=1
export NULL=/dev/null
export SUDO=""
if [ `id -u` -ne 0 ]
then
	SUDO="sudo "
fi
export OK='[  \e[32mOK\e[0m  ]'
export FAIL='[ \e[31mFAIL\e[0m ]'
# Prints out the usage of Relinux
usage()
{
	progname=
	count=0
	while [ $count -lt ${#PROGNAME} ]
	do
		progname="$progname "
		count=$(($count+1))
	done
	echo -e "Usage of $PROGNAME is as follows:"
	echo -e " "
	echo -e "   sudo $PROGNAME clean|iso|squashfs|onlyiso " \
"[configfile]"
	echo -e " "
	echo -e " "
	echo -e "Examples:"
	echo -e " "
	echo -e "   sudo $PROGNAME clean [configfile]              " \
" Cleans up files made by $PROGNAME"
	echo -e " "
	echo -e "   sudo $PROGNAME fullclean [configfile]          " \
" Cleans up files made by $PROGNAME, including the ISO file"
	echo -e "   sudo $PROGNAME squashfs [configfile]           " \
" Generates a .squashfs file from your system"
	echo -e " "
	echo -e "   sudo $PROGNAME onlyiso [configfile]            " \
" Generates a .iso file based on the .squashfs file generated by" \
" the previous listed command"
	echo -e "        $progname                                 " \
" If configfile is given, settings will be used from that file"
	echo -e " "
	echo -e "   sudo $PROGNAME iso [configfile]                " \
" Runs the last 2 listed commands"
	echo -e " "
	echo -e "   sudo $PROGNAME config                          " \
" Generates a configuration file in the current directory"
}
# Math MAX function
max()
{
	if [ $1 -gt $2 ]
	then
		echo $1
	else
		echo $2
	fi
}
# Prints a character N times
printchar()
{
	x=0
	while [ $x -lt $1 ]
	do
		echo -n "$2"
		x=$(($x+1))
	done
}
# Helper function for installing/removing packages
_helperPackageOp()
{
	DISPOP="$1"
	OP="$2"
	DISP="$3"
	PAK="$4"
	if [ $# -lt 5 ]
	then
		set $DISPOP $OP $DISP $PAK $FALSE
	fi
	CRITICAL=$5
	if [ $# -lt 6 ]
	then
		set $DISPOP $OP $DISP $PAK $CRITICAL 0
	fi
	MINSPACES=$6
	SPACES=$(($MINSPACES-${#DISP}))
	if [ ${#DISP} -ge $MINSPACES ]
	then
		SPACES=0
	fi
	echo -en "$DISPOP $DISP`printchar $SPACES ' '` "
	$SUDO apt-get $OP -y --force-yes -qq $PAK &>$NULL
	STATUS=$?
	if [ $STATUS -eq 0 ]
	then
		echo -e "$OK"
	else
		echo -e "$FAIL"
		if [ $CRITICAL -eq $TRUE ]
		then
			exit 1
		fi
	fi
	return $STATUS
}
# Installs a package
installpackage()
{
	_helperPackageOp "Installing  " install $@
	return $?
}
# Removes a package
removepackage()
{
	_helperPackageOp "Removing    " purge $@
	return $?
}
# 
# Checks if a package is installed, and if not, install it.
checkbin()
{
	if [ $# -lt 2 ]
	then
		app=$1
		set $app $app $app $FALSE 0
	elif [ $# -lt 3 ]
	then
		app=$1
		package=$2
		set $app $app $package $FALSE 0
	fi
	APP="$1"
	DISP="$2"
	PAK="$3"
	STATUS=$TRUE
	MINSPACES=$5
	SPACES=$(($MINSPACES-${#DISP}))
	if [ ${#DISP} -ge $MINSPACES ]
	then
		SPACES=0
	fi
	echo -en 'Checking for '"$DISP`printchar $SPACES ' '` "
	which $APP &>$NULL
	if [ $? -eq $TRUE ]
	then
		echo -e "$OK"
	else
		#echo -e "$FAIL"
		echo -e "\r"
		installpackage $DISP $PAK $4 $5
		STATUS=$?
	fi
	return $STATUS
}
# Checks if a package is installed by a file, and if not, install it
checkfile()
{
	if [ $# -lt 4 ]
	then
		set $1 $2 $3 $FALSE 0
	elif [ $# -lt 5 ]
	then
		set $1 $2 $3 $4 0
	fi
	FILE="$1"
	DISP="$2"
	PAK="$3"
	STATUS=$TRUE
	MINSPACES=$5
	SPACES=$(($MINSPACES-${#DISP}))
	if [ ${#DISP} -ge $MINSPACES ]
	then
		SPACES=0
	fi
	echo -en 'Checking for '"$DISP`printchar $SPACES ' '` "
	if [ -f $FILE ]
	then
		echo -e "$OK"
	else
		#echo "$FAIL"
		echo -e "\r"
		installpackage $DISP $PAK $4 $5
		STATUS=$?
	fi
	return $STATUS
}
# Checks if a package is installed by using DPKG
checkpackage()
{
	dpkg -l | awk '{print $2}' | grep '^'"$1"'$' &>$NULL
	return $?
}
# Checks if a list of packages are installed
checklist()
{
	count=0
	current=0
	type=$NULL
	first=$NULL
	second=$NULL
	third=$NULL
	m=0
	for i in $*
	do
		if [ $current -eq 2 ]
		then
			m=`max $m ${#i}`
		elif [ $current -eq 3 ]
		then
			current=-1
		fi
		current=$(($current+1))
	done
	echo $m
	current=0
	for i in $*
	do
		if [ $current -eq 0 ]
		then
			type=$i
		elif [ $current -eq 1 ]
		then
			first=$i
		elif [ $current -eq 2 ]
		then
			second=$i
		elif [ $current -eq 3 ]
		then
			third=$i
			current=-1
			if [[ $type == "b" ]]
			then
				checkbin $first $second $third $FALSE $m
			elif [[ $type == "f" ]]
			then
				checkfile $first $second $third $FALSE $m
			fi
		fi
		current=$(($current+1))
	done
}
# Boxes text
box()
{
	export count=${#1}
	export HASH=$(($count+6))
	printhash()
	{
		x=0
		while [ $x -lt $1 ]
		do
		  echo -n '#'
		  x=$(($x+1))
		done
	}
	printhash $HASH
	echo
	echo '## '$1' ##'
	printhash $HASH
	echo
}
# List file parser
parselist() {
	echo -n 'INCLUDE'
	cat $1 | grep '^+' | sed 's:^+ \(.*\):\1:g' | tr '\n' ' '
	echo
	echo -n 'EXCLUDE'
	cat $1 | grep '^-' | sed 's:^- \(.*\):\1:g' | tr '\n' ' '
	echo
}
# Simple uppercase conversion
toupper() {
	echo "$@" | tr '[:lower:]' '[:upper:]'
}
# Checks if a variable is inside a list
varin() {
	LIST=$1
	VAR=$2
	y=$FALSE
	for i in $LIST
	do
		if [[ $i == $VAR ]]
		then
			y=$TRUE
		fi
	done
	echo $y
}
# If the user gave an unknown argument or the user is not root, show the usage message
# and exit
if [ `varin "$POSSIBLEARGS" "$1"` -eq $FALSE -o `id -u` -ne 0 ]
then
	usage
	exit 1
fi
# Check if all apps needed are installed
checklist \
b bash bash bash \
b sed sed sed \
b find find findutils \
b passwd passwd passwd \
b rsync rsync rsync \
b mount mount mount \
b eject eject eject \
f /usr/lib/libdebian-installer.so.4.0.7 libdebian-installer4 libdebian-installer4 \
f /boot/memtest86+.bin memtest86+ memtest86+ \
b casper-login casper casper \
b mksquashfs mksquashfs squashfs-tools \
b unsquashfs unsquashfs squashfs-tools \
b genisoimage genisoimage genisoimage \
b os-prober os-prober os-prober \
b ubiquity ubiquity ubiquity \
b user-setup user-setup user-setup \
b discover-config discover-config discover \
b laptop-detect laptop-detect laptop-detect \
b xterm xterm xterm \
b syslinux syslinux syslinux \
b fscks util-linux util-linux \
b xresprobe xresprobe xresprobe \
b archdetect archdetect archdetect-deb \
b tree tree tree \
b lsinitramfs initramfs-tools initramfs-tools \
b dirname coreutils coreutils
# Check if the User configuration file is loaded
if [ $# -lt 2 ]
then
	export USERCONFIGFILE=$NULL
else
	export USERCONFIGFILE=$2
fi
# Load the relinux configuration file for defaults
. $CONFIGFILE
# Load the user configuration file
. $USERCONFIGFILE
# Generate the SquashFS file
cdfs() {
	############
	## STEP 1 ##
	############
	# Install/Remove all packages needed automatically
	#
	box 'STEP 1 of SquashFS'
	echo 'Installing/Removing all packages needed to install/remove'
	# Remove popularity-contest as it can break ubiquity
	checkpackage popularity-contest && removepackage popularity-contest \
"Popularity Contest"
	# Checks if the desktop session is KDE or other
	if [ ! -z $KDE_FULL_SESSION ]
	then
		checkpackage ubiquity-frontend-kde || \
installpackage ubiquity-frontend-kde "KDE Frontend for Ubiquity"
		checkpackage ubiquity-frontend-gtk && \
removepackage ubiquity-frontend-gtk "GTK Frontend for Ubiquity"
	else
		checkpackage ubiquity-frontend-gtk || \
installpackage ubiquity-frontend-gtk "GTK Frontend for Ubiquity"
		checkpackage ubiquity-frontend-kde && \
removepackage ubiquity-frontend-kde "KDE Frontend for Ubiquity"
	fi
	if [[ "$ALLOWCHANGESOURCESLIST" != "N" ]]
	then
		# prevent Ubiquity from changing the apt sources.list
		if [ ! -f "/usr/share/ubiquity/apt-setup.saved" ]
		then
			cp /usr/share/ubiquity/apt-setup /usr/share/ubiquity/apt-setup.saved
		fi
	fi
	############
	## STEP 2 ##
	############
	#
	# Create CD tree in $WORKDIR
	box 'STEP 2 of SquashFS'
	echo 'Creating CD tree in '"$WORKDIR"''
	if [ -d "$WORKDIR" ]; then
		rm -rf $WORKDIR/dummysys/var/*
		rm -rf $WORKDIR/dummysys/etc/*
		rm -rf $WORKDIR/ISOTMP/isolinux
		rm -rf $WORKDIR/ISOTMP/grub
		rm -rf $WORKDIR/ISOTMP/.disk
	else
		mkdir -p $WORKDIR/ISOTMP/casper
		mkdir -p $WORKDIR/ISOTMP/preseed
		mkdir -p $WORKDIR/dummysys/dev
		mkdir -p $WORKDIR/dummysys/etc
		mkdir -p $WORKDIR/dummysys/proc
		mkdir -p $WORKDIR/dummysys/tmp
		mkdir -p $WORKDIR/dummysys/sys
		mkdir -p $WORKDIR/dummysys/mnt
		mkdir -p $WORKDIR/dummysys/media/cdrom
		mkdir -p $WORKDIR/dummysys/var
		chmod ug+rwx,o+rwt $WORKDIR/dummysys/tmp
	fi
	mkdir -p $WORKDIR/ISOTMP/isolinux
	mkdir -p $WORKDIR/ISOTMP/.disk
	echo "Done"
	tree $WORKDIR
	############
	## STEP 3 ##
	############
	#
	# Copy /var and /etc to $WORKDIR/dummysys, and exclude $EXCLUDES
	box 'STEP 3 of SquashFS'
	echo "Copying /etc and /var to a temporary directory, "\
"so that we can work on them"
	EXCLUDES="$EXCLUDES *.pid boot/grub*"
	if [[ "$KEEPRELINUX" == "N" ]]
	then
		EXCLUDES="$EXCLUDES etc/relinux* usr/bin/relinux "\
"usr/doc/relinux*"
  fi
  if [[ "$KEEPLOG" == "N" ]]
  then
    EXCLUDES="$EXCLUDES *.log.* *.log"
  fi
  if [[ "$KEEPBACKUP" == "N" ]]
  then
    EXCLUDES="$EXCLUDES *.bak"
  fi
  if [[ "$KEEPOLD" == "N" ]]
  then
    EXCLUDES="$EXCLUDES *.[0-9].gz *.cache Cache *.bash_history"\
".thumbnails /tmp*"
  fi
  if [[ "$KEEPDEB" == "N" ]]
  then
    EXCLUDES="$EXCLUDES *.deb"
  fi
  if [[ "$BACKUPMODE" == "N" ]]
  then
    EXCLUDES="$EXCLUDES home"
  fi
  if [[ "$KEEPWORKDIR" == "N" ]]
  then
    TEMP=`echo $WORKDIR | sed 's:^.::g'`
    EXCLUDES="$EXCLUDES $TEMP"
  fi
  if [ "$EXCLUDES" != "" ]
  then
    for addvar in $EXCLUDES ; do
      VAREXCLUDES="$VAREXCLUDES --exclude='$addvar' "
    done
  fi
  rsync $VAREXCLUDES -a /var/. $WORKDIR/dummysys/var/.
  rsync $VAREXCLUDES -a /etc/. $WORKDIR/dummysys/etc/.
  echo "Done. Removing unneeded files, and changing others"
  rm -rf $WORKDIR/dummysys/etc/X11/xorg.conf*
  rm -rf $WORKDIR/dummysys/etc/resolv.conf
  rm -rf $WORKDIR/dummysys/etc/hosts
  rm -rf $WORKDIR/dummysys/etc/hostname
  rm -rf $WORKDIR/dummysys/etc/timezone
  rm -rf $WORKDIR/dummysys/etc/mtab
  rm -rf $WORKDIR/dummysys/etc/fstab
  rm -rf $WORKDIR/dummysys/etc/udev/rules.d/70-persistent*
  rm -rf $WORKDIR/dummysys/etc/cups/ssl/server.crt
  rm -rf $WORKDIR/dummysys/etc/cups/ssl/server.key
  rm -rf $WORKDIR/dummysys/etc/ssh/ssh_host_rsa_key
  rm -rf $WORKDIR/dummysys/etc/ssh/ssh_host_dsa_key.pub
  rm -rf $WORKDIR/dummysys/etc/ssh/ssh_host_dsa_key
  rm -rf $WORKDIR/dummysys/etc/ssh/ssh_host_rsa_key.pub
  ls $WORKDIR/dummysys/var/lib/apt/lists | grep -v ".gpg" | \
grep -v "lock" | grep -v "partial" | \
xargs -i rm $WORKDIR/dummysys/var/lib/apt/lists/{} ; 
  rm -rf $WORKDIR/dummysys/etc/group
  rm -rf $WORKDIR/dummysys/etc/passwd
  rm -rf $WORKDIR/dummysys/etc/shadow
  rm -rf $WORKDIR/dummysys/etc/shadow-
  rm -rf $WORKDIR/dummysys/etc/gshadow
  rm -rf $WORKDIR/dummysys/etc/gshadow-
  rm -rf $WORKDIR/dummysys/etc/wicd/wired-settings.conf
  rm -rf $WORKDIR/dummysys/etc/wicd/wireless-settings.conf
  ls $WORKDIR/dummysys/etc/NetworkManager/system-connections | \
xargs -i rm \
$WORKDIR/dummysys/etc/NetworkManager/system-connections/{} ;
  rm -rf $WORKDIR/dummysys/etc/printcap
  rm -rf $WORKDIR/dummysys/etc/cups/printers.conf
  touch $WORKDIR/dummysys/etc/printcap
  touch $WORKDIR/dummysys/etc/cups/printers.conf
  find $WORKDIR/dummysys/var/run $WORKDIR/dummysys/var/log \
$WORKDIR/dummysys/var/mail $WORKDIR/dummysys/var/spool \
$WORKDIR/dummysys/var/lock $WORKDIR/dummysys/var/backups \
$WORKDIR/dummysys/var/tmp $WORKDIR/dummysys/var/crash \
$WORKDIR/dummysys/var/lib/ubiquity -type f -exec rm -f {} \;
  for i in dpkg.log lastlog mail.log syslog auth.log daemon.log \
faillog lpr.log mail.warn user.log boot debug mail.err messages wtmp \
bootstrap.log dmesg kern.log mail.info
  do
    touch $WORKDIR/dummysys/var/log/${i}
  done
  # remove the non system users on the passwd and group files and
  # copy them to dummysys
  #
  # see if any temp users left over from previous versions of
  # relinux as the process has now changed
  grep '^[^:]*:[^:]*:[5-9][0-9][0-9]:' /etc/passwd | awk -F ":" \
'{print "/usr/sbin/userdel -f",$1}'> $WORKDIR/cleantmpusers
  . $WORKDIR/cleantmpusers
  grep '^[^:]*:[^:]*:[0-9]:' /etc/passwd >> $WORKDIR/dummysys/etc/passwd
  grep '^[^:]*:[^:]*:[0-9][0-9]:' /etc/passwd >> \
$WORKDIR/dummysys/etc/passwd
  grep '^[^:]*:[^:]*:[0-9][0-9][0-9]:' /etc/passwd >> \
$WORKDIR/dummysys/etc/passwd
  grep '^[^:]*:[^:]*:[3-9][0-9][0-9][0-9][0-9]:' /etc/passwd >> \
$WORKDIR/dummysys/etc/passwd
  grep '^[^:]*:[^:]*:[0-9]:' /etc/group >> $WORKDIR/dummysys/etc/group
  grep '^[^:]*:[^:]*:[0-9][0-9]:' /etc/group >> \
$WORKDIR/dummysys/etc/group
  grep '^[^:]*:[^:]*:[0-9][0-9][0-9]:' /etc/group >> \
$WORKDIR/dummysys/etc/group
  grep '^[^:]*:[^:]*:[3-9][0-9][0-9][0-9][0-9]:' /etc/group >> \
$WORKDIR/dummysys/etc/group
  grep '^[^:]*:[^:]*:[5-9][0-9][0-9]:' /etc/passwd | awk -F ":" \
'{print $1}' > $WORKDIR/tmpusers1
  grep '^[^:]*:[^:]*:[1-9][0-9][0-9][0-9]:' /etc/passwd | awk -F ":" \
'{print $1}' > $WORKDIR/tmpusers2
  grep '^[^:]*:[^:]*:[1-2][0-9][0-9][0-9][0-9]:' /etc/passwd | \
awk -F ":" '{print $1}' > $WORKDIR/tmpusers3
  cat $WORKDIR/tmpusers1 $WORKDIR/tmpusers2 $WORKDIR/tmpusers3 > \
$WORKDIR/tmpusers
  cat $WORKDIR/tmpusers | \
while read LINE
do
  echo $LINE | xargs -i sed -e 's/,{}//g' $WORKDIR/dummysys/etc/group \
> $WORKDIR/dummysys/etc/group.new1
  echo $LINE | xargs -i sed -e 's/{},//g' \
$WORKDIR/dummysys/etc/group.new1 > $WORKDIR/dummysys/etc/group.new2
  echo $LINE | xargs -i sed -e 's/{}//g' \
$WORKDIR/dummysys/etc/group.new2 > $WORKDIR/dummysys/etc/group
  rm -rf $WORKDIR/dummysys/etc/group.new1 \
$WORKDIR/dummysys/etc/group.new2
done
  echo "Done"
  ############
  ## STEP 4 ##
  ############
  #
  # Setup ISOLINUX
  #
  # Make sure that adduser and autologin have the correct permissions
  box 'STEP 4 of SquashFS'
  echo "Setting up ISOLINUX"
  [ ! -d $WORKDIR/dummysys/home ] && mkdir $WORKDIR/dummysys/home
  chmod 755 /usr/share/initramfs-tools/scripts/casper-bottom/*adduser \
/usr/share/initramfs-tools/scripts/casper-bottom/*autologin 
  # Copy the Preseed files
  cp $PRESEED $WORKDIR/ISOTMP/preseed/
  # Copy MemTest86+
  cp /boot/memtest86+.bin $WORKDIR/ISOTMP/isolinux/memtest
  # Check for some files that can come in handy
  if [ ! -f $DIR/customisolinux/isolinux.cfg ]; then
    find /usr -name 'isolinux.bin' -exec cp {} \
$WORKDIR/ISOTMP/isolinux/ \;
    find /usr -name 'vesamenu.c32' -exec cp {} \
$WORKDIR/ISOTMP/isolinux/ \;
    # System version, e.g. 11.10
    SYSVERSION=`lsb_release -rs`
    sed -e 's/__LIVECDLABEL__/'"$LIVECDLABEL"'/g' \
$ISOLINUX > $WORKDIR/ISOTMP/isolinux/isolinux.cfg
    # Add the splash image
    # Sed script simply renames the file, while keeping the extension
    ZASPLASHIMAGE=`echo \`basename $SPLASHIMAGE\` | \
sed 's:.*\(\..*\):splash\1:g'`
    cp $SPLASHIMAGE $WORKDIR/ISOTMP/isolinux/$ZASPLASHIMAGE
    sed -i 's/__SPLASHIMAGE__/'"$ZASPLASHIMAGE"'/g' \
$WORKDIR/ISOTMP/isolinux/isolinux.cfg
    sed -i 's/__TIMEOUT__/'"$LIVECDTIMEOUT"'/g' \
$WORKDIR/ISOTMP/isolinux/isolinux.cfg
  else
    cp $DIR/customisolinux/* $WORKDIR/ISOTMP/isolinux/
  fi
  # Checks the architecture of the system e.g. i386 or amd64
  ARCH=`archdetect | awk -F "/" '{print $1}'`
  cat > $WORKDIR/ISOTMP/README.diskdefines << EOF
#define DISKNAME  $LIVECDLABEL - Release $ARCH
#define TYPE  binary
#define TYPEbinary  1
#define ARCH  $ARCH
#define ARCH$ARCH  1
#define DISKNUM  1
#define DISKNUM1  1
#define TOTALNUM  0
#define TOTALNUM0  1
EOF
  cp $WORKDIR/ISOTMP/README.diskdefines \
$WORKDIR/ISOTMP/casper/README.diskdefines
  # Make filesystem.manifest (package list)
  echo "Creating filesystem.manifest and filesystem.manifest-desktop"
  dpkg-query -W --showformat='${Package} ${Version}\n' \
        > $WORKDIR/ISOTMP/casper/filesystem.manifest
  # Remove unwanted packages
  for i in $REMOVEAFTERINSTALL
  do
    # Notice that I used # as the delimiter, as /, : and = are used
    # in Apt and Aptitude
    sed -i 's#'"$i"'##g' $WORKDIR/ISOTMP/casper/filesystem.manifest
  done
  cp $WORKDIR/ISOTMP/casper/filesystem.manifest \
$WORKDIR/ISOTMP/casper/filesystem.manifest-desktop
  if [[ "$GENERATECASPER" == "Y" ]]
  then
    if [[ "$GENERATELSBRELEASE" == "Y" ]]
    then
      echo "Setting Casper, Ubiquity, and LSB_RELEASE options"
    else
      echo "Setting Capser, and Ubiquity options"
    fi
  else
    if [[ "$GENERATELSBRELEASE" == "Y" ]]
    then
      echo "Setting Ubiquity, and LSB_RELEASE options"
    else
      echo "Setting Ubiquity options"
    fi
  fi
  if [[ "$GENERATECASPER" == "Y" ]]
  then
    # Make casper.conf
    echo "# This file should go in /etc/casper.conf" > \
$WORKDIR/dummysys/etc/casper.conf
    echo "# Supported variables are:" >> \
$WORKDIR/dummysys/etc/casper.conf
    echo "# USERNAME, USERFULLNAME, HOST, BUILD_SYSTEM" >> \
$WORKDIR/dummysys/etc/casper.conf
    echo " " >> $WORKDIR/dummysys/etc/casper.conf
    echo "export USERNAME=\"$LIVEUSER\"" >> \
$WORKDIR/dummysys/etc/casper.conf
    echo "export USERFULLNAME=\"$LIVENAME\"" >> \
$WORKDIR/dummysys/etc/casper.conf
    echo "export HOST=\"$HOSTNAME\"" >> \
$WORKDIR/dummysys/etc/casper.conf
    echo "export BUILD_SYSTEM=\"$SYSNAME\"" >> \
$WORKDIR/dummysys/etc/casper.conf
  fi
  if [[ "GENERATELSBRELEASE" == "Y" ]]
  then
    # Make lsb-release
    echo "DISTRIB_ID=\"$SYSNAME\"" > $WORKDIR/dummysys/etc/lsb-release
    echo "DISTRIB_RELEASE=\"$SYSVERSION\"" >> \
$WORKDIR/dummysys/etc/lsb-release
    echo "DISTRIB_CODENAME=\"$SYSCODE\"" >> \
$WORKDIR/dummysys/etc/lsb-release
    echo "DISTRIB_DESCRIPTION=\"$SYSDESC\"" >> \
$WORKDIR/dummysys/etc/lsb-release
  fi
  # Make sure user-setup-apply is present
  if [ -f /usr/lib/ubiquity/user-setup/user-setup-apply.orig ]
  then
    if [ ! -f /usr/lib/ubiquity/user-setup/user-setup-apply ]
    then
      cp /usr/lib/ubiquity/user-setup/user-setup-apply.orig \
/usr/lib/ubiquity/user-setup/user-setup-apply
    fi
  fi
  if [[ "$ALLOWCHANGESOURCESLIST" == "N" ]]
  then
    rm -f /usr/share/ubiquity/apt-setup
    echo "# do nothing" > /usr/share/ubiquity/apt-setup
    chmod 0755 /usr/share/ubiquity/apt-setup
  else
    # Bug in ubiquity, so we need to remove CDROM support :-(
    rm -f /usr/lib/ubiquity/apt-setup/generators/40cdrom
  fi
  # Make a new initial ramdisk including the casper scripts
  mkinitramfs -o $WORKDIR/ISOTMP/casper/initrd.gz `uname -r`
  echo "Copying your kernel and initrd to the livecd"
  cp /boot/vmlinuz-`uname -r` $WORKDIR/ISOTMP/casper/vmlinuz
  # Make filesystem.squashfs
  if [ -f $WORKDIR/ISOTMP/casper/filesystem.squashfs ]
  then
    rm -f $WORKDIR/ISOTMP/casper/filesystem.squashfs
  fi
  ############
  ## STEP 5 ##
  ############
  #
  # Create SquashFS file
  box 'STEP 5 of SquashFS'
  echo "Creating filesystem.squashfs"
  echo "This will take a while so be patient"
  SQUASHFSOPTSHIGH="-no-recovery -always-use-fragments"
  echo "Adding stage 1 files/folders that the livecd requires."
  # add the blank folders and trimmed down /var to the cd filesystem
  mksquashfs $WORKDIR/dummysys/ \
$WORKDIR/ISOTMP/casper/filesystem.squashfs -b 1M -no-duplicates \
$SQUASHFSOPTSHIGH > /dev/null 2>&1
  echo "Adding stage 2 files/folders that the livecd requires."
  echo "This will probably take longer than the first stage."
  # Add the rest of the system
    mksquashfs / $WORKDIR/ISOTMP/casper/filesystem.squashfs -b 1M \
-no-duplicates $SQUASHFSOPTSHIGH -e .thumbnails .cache .bash_history \
Cache boot/grub dev etc media mnt proc sys var \
$WORKDIR $EXCLUDES > /dev/null 2>&1
  # Make sure that the SquashFS file is under the iso9660 specification
  SQUASHFSSIZE=`wc -c $WORKDIR/ISOTMP/casper/filesystem.squashfs | \
awk -F " " '{print $1}'`
  if [ "$SQUASHFSSIZE" -ge "4294967296" ]
  then
    echo " The compressed filesystem is larger than the iso9660 "\
"specification allows for a single file. You must try to reduce the "\
"amount of data you are making and try again."
    exit 1
  fi
  # Add filesystem size
  echo "Calculating the installed filesystem size for the installer"
  unsquashfs -lls $WORKDIR/ISOTMP/casper/filesystem.squashfs | \
grep -v " inodes " | grep -v "unsquashfs:" | \
awk '{print $3}' | grep -v "," > /tmp/size.tmp
  for i in `cat /tmp/size.tmp`
  do
    a=$(($a+$i))
  done
  echo $a > $WORKDIR/ISOTMP/casper/filesystem.size
  echo "Done"
  echo "Creating MD5 sum"
  md5sum $WORKDIR/ISOTMP/casper/filesystem.squashfs > \
$WORKDIR/.filesystem.squashfs.md5
  touch $WORKDIR/.filesystem.squashfs.GENERATED.BY.RELINUX.PROOF
  echo "Done"
  echo "Finished generating SquashFS file."
}
# Generate the ISO file from the function above
iso() {
  ############
  ## STEP 1 ##
  ############
  #
  # Detect tools for ISO Generation
  box 'STEP 1 of ISO Generation'
  echo "Detecting your tools for ISO generation"
  CREATEISO="`which genisoimage`"
  if [ "$CREATEISO" = "" ]; then
    CREATEISO="`which mkisofs`"
  fi
  echo "Done"
  ############
  ## STEP 2 ##
  ############
  #
  # Verify the SquashFS file
  box 'STEP 2 of ISO Generation'
  echo "Verifying your SquashFS file"
  # check to see if the cd filesystem exists
  if [ ! -f "$WORKDIR/ISOTMP/casper/filesystem.squashfs" ]; then
    echo "The CD filesystem is missing.  Either there was a problem "\
"creating the compressed filesystem or you are trying to run "\
"sudo relinux only before sudo relinux squashfs"
    exit 1
  fi
  if [ ! -f "$WORKDIR/.filesystem.squashfs.GENERATED.BY.RELINUX.PROOF" ]
  then
    echo "The CD filesystem is not made by Relinux, and therefore, "\
"cannot be used. Run 'sudo relinux squashfs [configfile]' "\
"(without quotes, and replace configfile with your configuration file)"\
" to fix this problem."
    exit 1
  fi
  if [ ! -f "$WORKDIR/.filesystem.squashfs.md5" ]
  then
    echo "No MD5 Sums are present. Run 'sudo relinux squashfs "\
"[configfile]' (without quotes, and replace configfile with your "\
"configuration file) to fix this problem."
    exit 1
  else
    md5sum -c $WORKDIR/.filesystem.squashfs.md5 > /dev/null 2>&1
    if [ $? -ne 0 ]
    then
      echo "SquashFS file does not match MD5 sum. Run 'sudo relinux "\
"squashfs [configfile]' (without quotes, and replace configfile with "\
"your configuration file) to fix this problem."
      exit 1
    fi
  fi
  # Make sure that the SquashFS file is under the iso9660 specification
  SQUASHFSSIZE=`wc -c $WORKDIR/ISOTMP/casper/filesystem.squashfs | \
awk -F " " '{print $1}'`
  if [ "$SQUASHFSSIZE" -ge "4294967296" ]; then
    echo " The compressed filesystem is larger than the iso9660 "\
"specification allows for a single file. You must try to reduce the "\
"amount of data you are making and try again."
    exit 1
  fi
  echo "Done. No errors."
  ############
  ## STEP 3 ##
  ############
  #
  # Make the ISO compatible with Ubuntu Startup Disk Creator
  box 'STEP 3 of ISO Generation'
  echo "Making disk compatible with Ubuntu Startup Disk Creator."
  touch $WORKDIR/ISOTMP/ubuntu
  touch $WORKDIR/ISOTMP/.disk/base_installable
  echo "full_cd/single" > $WORKDIR/ISOTMP/.disk/cd_type
  ARCH=`archdetect | awk -F "/" '{print $1}'`
  echo "$LIVECDLABEL - Release $ARCH" > $WORKDIR/ISOTMP/.disk/info
  echo "$LIVECDURL" > $WORKDIR/ISOTMP/.disk/release_notes_url
  ############
  ## STEP 4 ##
  ############
  #
  # Make the MD5 Sums
  box 'STEP 4 of ISO Generation'
  echo "Making temporary MD5 Sums for generation of the ISO file"
  cd $WORKDIR/ISOTMP && find . -type f -print0 | xargs -0 md5sum > \
md5sum.txt
  # remove files that change and cause problems with checking the disk
  sed -i 's/.*isolinux.*//g' md5sum.txt
  sed -i 's/.*md5sum.*//g' md5sum.txt
  ############
  ## STEP 5 ##
  ############
  #
  # Create the ISO file and MD5 sum
  box 'STEP 5 of ISO Generation (final step)'
  echo "Creating the ISO file and MD5 sum for it"
  echo "Creating $CUSTOMISO in $WORKDIR"
  $CREATEISO -quiet -r -V "$LIVECDLABEL" -cache-inodes -J -l \
-b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot \
-boot-load-size 4 -boot-info-table -o $WORKDIR/$CUSTOMISO \
"$WORKDIR/ISOTMP" > /dev/null 2>&1
  # Create the MD5 sum
  echo "Creating $CUSTOMISO.md5 in $WORKDIR"
  cd $WORKDIR
  md5sum $CUSTOMISO > $CUSTOMISO.md5
  sleep 1
  echo "Done"
  echo
  echo "$WORKDIR/$CUSTOMISO is generated. It is recommended to run it"\
" inside a virtual machine before you release it."
  echo
  echo "The size of $WORKDIR/$CUSTOMISO is "\
"`ls -hs $WORKDIR/$CUSTOMISO | awk '{print $1}'`"
  ISOSIZE=`wc -c $WORKDIR/$CUSTOMISO | awk '{print $1}'`
  if [ "$ISOSIZE" -ge "734003200" ]
  then
    echo "You will need to burn a DVD/USB/Blu-Ray disk instead of a CD."
  fi
  echo
  echo "It is recommended to run 'sudo relinux clean' (without quotes)"\
" once you have burned and tested $CUSTOMISO"
  echo "It will not delete $CUSTOMISO or $CUSTOMISO.md5"
  echo
}

if [[ "$1" == "clean" ]]
then
  echo "Cleaning..."
  rm -rf $WORKDIR/dummysys > /dev/null 2>&1
  rm -rf $WORKDIR/ISOTMP > /dev/null 2>&1
  rm -f $WORKDIR/.filesystem.squashfs.* > /dev/null 2>&1
  echo "Done"
  exit 0
fi
if [[ "$1" == "fullclean" ]]
then
  echo "Cleaning..."
  rm -rf $WORKDIR
  echo "Done"
  exit 0
fi
if [[ "$1" == "squashfs" ]]
then
  cdfs $@
  exit 0
fi
if [[ "$1" == "onlyiso" ]]
then
  iso $@
  exit 0
fi
if [[ "$1" == "config" ]]
then
  echo "Generating configuration file..."
  cp /etc/relinux/relinux.conf ./relinux.conf
  sed -i \
's:EXCLUDES="\(.*\)":EXCLUDES="\1 '`readlink -f ./relinux.conf`'":g' \
./relinux.conf
  chmod 0666 ./relinux.conf
  echo "Done. File is located here: `readlink -f ./relinux.conf`"
  exit 0
fi
cdfs $@
iso $@
exit 0
